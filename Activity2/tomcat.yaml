---
- name: Install tomcat 9
  become: yes
  hosts: appserver
  vars:
    - username: tomcat
    - home_dir: /opt/tomcat
    - default_shell: /bin/false
    - tomcat_version: 9.0.70
    - tomcat_latest: /opt/tomcat/latest
    - tomcat_bin_directory: /opt/tomcat/latest/bin/
    - tomcat_service_location: /etc/systemd/system/tomcat.service
    - java_home: /usr/lib/jvm/java-11-openjdk-amd64
  tasks:
    - name: update apt repo and cache
      apt:
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"
    - name: install openjdk 11
      package:
        name: "{{ java_package }}"
        state: present
    - name: create a tomcat user
      ansible.builtin.user:
        create_home: yes
        # group: "{{ username }}"
        home: "{{ home_dir }}"
        name: "{{ username }}"
        shell: "{{ default_shell }}"
        state: present
      when: ansible_facts['os_family'] == "Debian"
    - name: Download tomcat
      ansible.builtin.get_url:
        url: "https://dlcdn.apache.org/tomcat/tomcat-9/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
        dest: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"
      when: ansible_facts['os_family'] == "Debian"  
    - name: Extract tomcat
      ansible.builtin.unarchive:
        src: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"
        creates: "{{ home_dir }}/apache-tomcat-{{ tomcat_version }}"
        dest: "{{ home_dir }}"
        group: "{{ username }}"
        owner: "{{ username }}" 
        remote_src: yes 
      when: ansible_facts['os_family'] == "Debian" 
    - name: create symlink
      ansible.builtin.file:
        src: "{{ home_dir }}/apache-tomcat-{{ tomcat_version }}"
        dest: "{{ tomcat_latest }}"
        group: "{{ username }}"
        owner: "{{ username }}"
        state: link
      when: ansible_facts['os_family'] == "Debian"
    - name: change ownership to tomcat user
      ansible.builtin.file:
        path: "{{ home_dir }}"
        state: directory
        recurse: yes
        group: "{{ username }}"
        owner: "{{ username }}"
      when: ansible_facts['os_family'] == "Debian"     
    - name: find all the .sh files in the tomcat bin directory
      ansible.builtin.find:
        paths: "{{ tomcat_bin_directory }}"
        patterns: "*.sh"
      when: ansible_facts['os_family'] == "Debian"
      register: sh_files_tomcat_bin
    - name: print the files from the previous
      debug:
        var: sh_files_tomcat_bin
    - name: Make shell scripts executable
      ansible.builtin.file:
        path: '{{ item.path }}'
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: '0755'
      loop: "{{ sh_files_tomcat_bin.files }}"
      when: ansible_facts['os_family'] == "Debian"      
    - name: copy the tomcat service file
      ansible.builtin.template:
        src: 'tomcat.service.j2'
        dest: "{{ tomcat_service_location }}"
        owner: "{{ username }}"
        group: "{{ username }}"
      when: ansible_facts['os_family'] == "Debian"
      notify:
        - reload the daemon, enable and start the tomcat service
    - name: ensure tomcat service is running
      ansible.builtin.systemd:
        name: 'tomcat.service'
        state: 'started'
      when: ansible_facts['os_family'] == "Debian"
  handlers:
    - name: reload the daemon, enable and start the tomcat service
      ansible.builtin.systemd:
        name: 'tomcat.service'
        daemon_reload: yes
        enabled: yes
        state: restarted
      when: ansible_facts['os_family'] == "Debian"  